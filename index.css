/* body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
} */

/* 
Folder Structure
css
Copy
Edit
src/
│
├── components/
│   ├── GridComponent.jsx
│   └── ModalForm.jsx
│
├── redux/
│   ├── actions.js
│   ├── reducers.js
│   └── store.js
│
└── App.jsx
Step 1: Redux Setup
src/redux/actions.js
js
Copy
Edit
export const ADD_ROW = "ADD_ROW";
export const UPDATE_ROW = "UPDATE_ROW";
export const DELETE_ROW = "DELETE_ROW";

export const addRow = (row) => ({
  type: ADD_ROW,
  payload: row,
});

export const updateRow = (index, row) => ({
  type: UPDATE_ROW,
  payload: { index, row },
});

export const deleteRow = (index) => ({
  type: DELETE_ROW,
  payload: index,
});
src/redux/reducers.js
js
Copy
Edit
import { ADD_ROW, UPDATE_ROW, DELETE_ROW } from "./actions";

const initialState = {
  rows: [
    {
      name: "abcd",
      age: 25,
      carbrand: "bmw",
      carmodel: "m5",
      income: 120000,
      isElectric: true,
    },
    {
      name: "xyz",
      age: 30,
      carbrand: "audi",
      carmodel: "q7",
      income: 100000,
      isElectric: false,
    },
  ],
};

export const gridReducer = (state = initialState, action) => {
  switch (action.type) {
    case ADD_ROW:
      return { ...state, rows: [...state.rows, action.payload] };

    case UPDATE_ROW:
      const updatedRows = [...state.rows];
      updatedRows[action.payload.index] = action.payload.row;
      return { ...state, rows: updatedRows };

    case DELETE_ROW:
      const filteredRows = state.rows.filter((_, i) => i !== action.payload);
      return { ...state, rows: filteredRows };

    default:
      return state;
  }
};
src/redux/store.js
js
Copy
Edit
import { createStore } from "redux";
import { gridReducer } from "./reducers";

const store = createStore(
  gridReducer,
  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()
);

export default store;
Step 2: Components
src/components/ModalForm.jsx
jsx
Copy
Edit
import React from "react";

const ModalForm = ({ formData, onChange, onSave, onClear, onCancel }) => {
  return (
    <div
      style={{
        position: "fixed",
        top: 0,
        left: 0,
        width: "100vw",
        height: "100vh",
        backgroundColor: "rgba(0,0,0,0.3)",
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        zIndex: 1000,
      }}
    >
      <div
        style={{
          backgroundColor: "white",
          padding: 20,
          borderRadius: 8,
          width: 400,
          boxShadow: "0 0 10px rgba(0,0,0,0.25)",
        }}
      >
        <h3>{formData.isEdit ? "Edit Row" : "Add New Row"}</h3>
        <form
          onSubmit={(e) => {
            e.preventDefault();
            onSave();
          }}
        >
          <div style={{ marginBottom: 10 }}>
            <label>Name: </label>
            <input
              type="text"
              name="name"
              value={formData.name}
              onChange={onChange}
              required
            />
          </div>
          <div style={{ marginBottom: 10 }}>
            <label>Age: </label>
            <input
              type="number"
              name="age"
              value={formData.age}
              onChange={onChange}
            />
          </div>
          <div style={{ marginBottom: 10 }}>
            <label>Car Brand: </label>
            <input
              type="text"
              name="carbrand"
              value={formData.carbrand}
              onChange={onChange}
              required
            />
          </div>
          <div style={{ marginBottom: 10 }}>
            <label>Car Model: </label>
            <input
              type="text"
              name="carmodel"
              value={formData.carmodel}
              onChange={onChange}
            />
          </div>
          <div style={{ marginBottom: 10 }}>
            <label>Income: </label>
            <input
              type="number"
              name="income"
              value={formData.income}
              onChange={onChange}
            />
          </div>
          <div style={{ marginBottom: 10 }}>
            <label>
              <input
                type="checkbox"
                name="isElectric"
                checked={formData.isElectric}
                onChange={onChange}
              />{" "}
              Electric
            </label>
          </div>

          <div style={{ display: "flex", justifyContent: "space-between" }}>
            <button type="submit">Save</button>
            <button type="button" onClick={onClear}>
              Clear
            </button>
            <button type="button" onClick={onCancel}>
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default ModalForm;
src/components/GridComponent.jsx
jsx
Copy
Edit
import React, { useState } from "react";
import { AgGridReact } from "ag-grid-react";
import "ag-grid-community/styles/ag-grid.css";
import "ag-grid-community/styles/ag-theme-alpine.css";
import { ModuleRegistry } from "ag-grid-community";
import { ClientSideRowModelModule } from "ag-grid-community";

import { useSelector, useDispatch } from "react-redux";
import { addRow, updateRow, deleteRow } from "../redux/actions";
import ModalForm from "./ModalForm";

ModuleRegistry.registerModules([ClientSideRowModelModule]);

const GridComponent = () => {
  const rows = useSelector((state) => state.rows);
  const dispatch = useDispatch();

  const initialFormData = {
    name: "",
    age: "",
    carbrand: "",
    carmodel: "",
    income: "",
    isElectric: false,
    isEdit: false,
  };

  const [formData, setFormData] = useState(initialFormData);
  const [showModal, setShowModal] = useState(false);
  const [editIndex, setEditIndex] = useState(null);

  const handleAdd = () => {
    setFormData(initialFormData);
    setEditIndex(null);
    setShowModal(true);
  };

  const handleEdit = (data, index) => {
    setFormData({ ...data, isEdit: true });
    setEditIndex(index);
    setShowModal(true);
  };

  const handleDelete = (index) => {
    if (window.confirm("Are you sure you want to delete this row?")) {
      dispatch(deleteRow(index));
    }
  };

  const handleSave = () => {
    if (!formData.name || !formData.carbrand) {
      alert("Please enter at least name and car brand");
      return;
    }

    const dataToSave = { ...formData };
    delete dataToSave.isEdit;

    if (editIndex !== null) {
      dispatch(updateRow(editIndex, dataToSave));
    } else {
      dispatch(addRow(dataToSave));
    }

    setShowModal(false);
    setFormData(initialFormData);
    setEditIndex(null);
  };

  const handleClear = () => {
    setFormData(initialFormData);
  };

  const handleCancel = () => {
    setShowModal(false);
    setFormData(initialFormData);
    setEditIndex(null);
  };

  const onInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: type === "checkbox" ? checked : value,
    }));
  };

  const columnDefs = [
    { field: "name", headerName: "Name" },
    { field: "age", headerName: "Age" },
    { field: "carbrand", headerName: "Car Brand" },
    { field: "carmodel", headerName: "Car Model" },
    { field: "income", headerName: "Income" },
    {
      field: "isElectric",
      headerName: "Electric",
      valueFormatter: (params) => (params.value ? "Yes" : "No"),
    },
    {
      headerName: "Actions",
      field: "actions",
      cellRendererFramework: (params) => (
        <div>
          <button onClick={() => handleEdit(params.data, params.rowIndex)}>
            Edit
          </button>
          <button
            onClick={() => handleDelete(params.rowIndex)}
            style={{ marginLeft: "5px" }}
          >
            Delete
          </button>
        </div>
      ),
      editable: false,
      filter: false,
      sortable: false,
      width: 150,
    },
  ];

  return (
    <div style={{ width: "900px", margin: "auto", marginTop: "20px" }}>
      <button onClick={handleAdd} style={{ marginBottom: "10px" }}>
        Add New Row
      </button>

      <div className="ag-theme-alpine" style={{ height: 400, width: "100%" }}>
        <AgGridReact
          rowData={rows}
          columnDefs={columnDefs}
          domLayout="autoHeight"
          defaultColDef={{ flex: 1, minWidth: 100, editable: false }}
        />
      </div>

      {showModal && (
        <ModalForm
          formData={formData}
          onChange={onInputChange}
          onSave={handleSave}
          onClear={handleClear}
          onCancel={handleCancel}
        />
      )}
    </div>
  );
};

export default GridComponent;
Step 3: App.jsx
src/App.jsx
jsx
Copy
Edit
import React from "react";
import { Provider } from "react-redux";
import store from "./redux/store";
import GridComponent from "./components/GridComponent";

const App = () => (
  <Provider store={store}>
    <GridComponent />
  </Provider>
);

export default App; */



/* 
// import React, { useState, useRef } from 'react';
// import { AgGridReact } from 'ag-grid-react';

// import 'ag-grid-community/styles/ag-grid.css';
// import 'ag-grid-community/styles/ag-theme-alpine.css';

// // Module registration (required from AG Grid v29+)
// import { ModuleRegistry } from 'ag-grid-community';
// import { ClientSideRowModelModule } from 'ag-grid-community';
// ModuleRegistry.registerModules([ClientSideRowModelModule]);

// const App = () => {
//   const [rowData, setRowData] = useState([
//     { name: "abcd", age: 25, carbrand: "BMW", carmodel: "M5", income: 120000, isElectric: true },
//   ]);

//   const [showModal, setShowModal] = useState(false);
//   const [formData, setFormData] = useState({
//     name: '',
//     age: '',
//     carbrand: '',
//     carmodel: '',
//     income: '',
//     isElectric: false
//   });

//   const gridRef = useRef();

//   const columnDefs = [
//     { field: 'name' },
//     { field: 'age' },
//     { field: 'carbrand' },
//     { field: 'carmodel' },
//     { field: 'income' },
//     { field: 'isElectric', headerName: 'Electric Car' },
//   ];

//   const handleAddRow = () => {
//     setRowData([...rowData, formData]);
//     setFormData({ name: '', age: '', carbrand: '', carmodel: '', income: '', isElectric: false });
//     setShowModal(false);
//   };

//   const handleClear = () => {
//     setFormData({ name: '', age: '', carbrand: '', carmodel: '', income: '', isElectric: false });
//   };

//   const handleCancel = () => {
//     setShowModal(false);
//   };

//   return (
//     <div style={{ margin: '20px' }}>
//       <h2>AG Grid with CRUD (Add Row)</h2>
//       <button onClick={() => setShowModal(true)} style={{ marginBottom: '10px' }}>
//         Add Row
//       </button>

//       <div className="ag-theme-alpine" style={{ height: 400, width: '100%' }}>
//         <AgGridReact
//           ref={gridRef}
//           rowData={rowData}
//           columnDefs={columnDefs}
//         />
//       </div>

//       {showModal && (
//         <div style={modalStyle}>
//           <div style={modalContentStyle}>
//             <h3>Add New Entry</h3>
//             <form>
//               <label>Name: <input value={formData.name} onChange={e => setFormData({ ...formData, name: e.target.value })} /></label><br />
//               <label>Age: <input type="number" value={formData.age} onChange={e => setFormData({ ...formData, age: e.target.value })} /></label><br />
//               <label>Car Brand: <input value={formData.carbrand} onChange={e => setFormData({ ...formData, carbrand: e.target.value })} /></label><br />
//               <label>Car Model: <input value={formData.carmodel} onChange={e => setFormData({ ...formData, carmodel: e.target.value })} /></label><br />
//               <label>Income: <input type="number" value={formData.income} onChange={e => setFormData({ ...formData, income: e.target.value })} /></label><br />
//               <label>
//                 Electric: 
//                 <input type="checkbox" checked={formData.isElectric} onChange={e => setFormData({ ...formData, isElectric: e.target.checked })} />
//               </label><br /><br />
//               <button type="button" onClick={handleAddRow}>Save</button>
//               <button type="button" onClick={handleClear} style={{ marginLeft: '10px' }}>Clear</button>
//               <button type="button" onClick={handleCancel} style={{ marginLeft: '10px' }}>Cancel</button>
//             </form>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// };

// export default App;

// // Basic Modal Styling
// const modalStyle = {
//   position: 'fixed',
//   top: 0, left: 0, right: 0, bottom: 0,
//   backgroundColor: 'rgba(0, 0, 0, 0.5)',
//   display: 'flex',
//   justifyContent: 'center',
//   alignItems: 'center',
//   zIndex: 999
// };

// const modalContentStyle = {
//   backgroundColor: 'white',
//   padding: '20px',
//   borderRadius: '5px',
//   width: '300px'
// };
 */

